                                  14.16 Content-Range

The header SHOULD indicate the total length of the full entity-body,
   unless this length is unknown or difficult to determine. The asterisk
   "*" character means that the instance-length is unknown at the time
   when the response was generated.

STATUS CODE :  416 , 206 , 200
A server sending a response with status code 416 (Requested range not
   satisfiable) SHOULD include a Content-Range field with a byte-range-
   resp-spec of "*". The instance-length specifies the current length of
the selected resource. A response with status code 206 (Partial
   Content) MUST NOT include a Content-Range field with a byte-range-
   resp-spec of "*".

If the server ignores a byte-range-spec because it is syntactically
   invalid, the server SHOULD treat the request as if the invalid Range
   header field did not exist. (Normally, this means return a 200
   response containing the full entity).


-----------------------------------------------------------------------------------

 The Content-Range entity-header is sent with a partial entity-body to
   specify where in the full entity-body the partial body should be
   applied. Range units are defined in section 3.12.

       Content-Range = "Content-Range" ":" content-range-spec

       content-range-spec      = byte-content-range-spec
       byte-content-range-spec = bytes-unit SP
                                 byte-range-resp-spec "/"
                                 ( instance-length | "*" )

       byte-range-resp-spec = (first-byte-pos "-" last-byte-pos)
                                      | "*"
       instance-length           = 1*DIGIT

The header SHOULD indicate the total length of the full entity-body,
   unless this length is unknown or difficult to determine. The asterisk
   "*" character means that the instance-length is unknown at the time
   when the response was generated.

Unlike byte-ranges-specifier values (see section 14.35.1), a byte-
   range-resp-spec MUST only specify one range, and MUST contain
   absolute byte positions for both the first and last byte of the
   range.

A byte-content-range-spec with a byte-range-resp-spec whose last-
   byte-pos value is less than its first-byte-pos value, or whose
   instance-length value is less than or equal to its last-byte-pos
   value, is invalid. The recipient of an invalid byte-content-range-
   spec MUST ignore it and any content transferred along with it.


A server sending a response with status code 416 (Requested range not
   satisfiable) SHOULD include a Content-Range field with a byte-range-
   resp-spec of "*". The instance-length specifies the current length of
the selected resource. A response with status code 206 (Partial
   Content) MUST NOT include a Content-Range field with a byte-range-
   resp-spec of "*".

Examples of byte-content-range-spec values, assuming that the entity
   contains a total of 1234 bytes:

      . The first 500 bytes:
       bytes 0-499/1234

      . The second 500 bytes:
       bytes 500-999/1234

      . All except for the first 500 bytes:
       bytes 500-1233/1234

      . The last 500 bytes:
       bytes 734-1233/1234

When an HTTP message includes the content of a single range (for
   example, a response to a request for a single range, or to a request
   for a set of ranges that overlap without any holes), this content is
   transmitted with a Content-Range header, and a Content-Length header
   showing the number of bytes actually transferred. For example,

       HTTP/1.1 206 Partial content
       Date: Wed, 15 Nov 1995 06:25:24 GMT
       Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT
       Content-Range: bytes 21010-47021/47022
       Content-Length: 26012
       Content-Type: image/gif


When an HTTP message includes the content of multiple ranges (for
   example, a response to a request for multiple non-overlapping
   ranges), these are transmitted as a multipart message. The multipart
   media type used for this purpose is "multipart/byteranges" as defined
   in appendix 19.2. See appendix 19.6.3 for a compatibility issue.

                                                              
A response to a request for a single range MUST NOT be sent using the
   multipart/byteranges media type.  A response to a request for
   multiple ranges, whose result is a single range, MAY be sent as a
   multipart/byteranges media type with one part. A client that cannot
   decode a multipart/byteranges message MUST NOT ask for multiple
   byte-ranges in a single request.

When a client requests multiple byte-ranges in one request, the
   server SHOULD return them in the order that they appeared in the
   request.

If the server ignores a byte-range-spec because it is syntactically
   invalid, the server SHOULD treat the request as if the invalid Range
   header field did not exist. (Normally, this means return a 200
   response containing the full entity).


If the server receives a request (other than one including an If-
   Range request-header field) with an unsatisfiable Range request-
   header field (that is, all of whose byte-range-spec values have a
   first-byte-pos value greater than the current length of the selected
   resource), it SHOULD return a response code of 416 (Requested range
   not satisfiable) (section 10.4.17).

Note: clients cannot depend on servers to send a 416 (Requested
      range not satisfiable) response instead of a 200 (OK) response for
      an unsatisfiable Range request-header, since not all servers
      implement this request-header.



--------------------------------------------------------------------------------------

RFC 2616, which specifies HTTP/1.1, describes how HTTP handles the transmission of web resources. 
  One important feature is the use of range requests, which allow a client to request specific portions of a resource, 
rather than the entire resource. This can be particularly useful for resuming interrupted downloads, 
or for fetching only a specific part of a large file.

                                                              
#Range Requests

A range request uses the `Range` header in the HTTP request to specify the part of the resource 
that the client wants to download. The server then responds with the requested part of the resource and indicates 
this with a `Content-Range` header in the response.

                                                              
#Range Header in Request

The `Range` header specifies the byte range the client is requesting. For example:

              
              Range: bytes=0-499

This requests the first 500 bytes of the resource.

#Content-Range Header in Response

If the server supports range requests and can fulfill the request, it responds with a `206 Partial Content` status code 
  and includes a `Content-Range` header in the response. This header specifies which part of the resource is being returned. 
  For example:

            
            HTTP/1.1 206 Partial Content
            Content-Range: bytes 0-499/1234


This indicates that the response contains bytes 0 to 499 of the total 1234 bytes.

                                                              
#Example

Let's walk through a practical example. Suppose there is a file available at `http://example.com/largefile.zip`, which is 
10000 bytes in size. A client wants to download the first 1000 bytes.

1. Client Request:

   
                 GET /largefile.zip HTTP/1.1
                 Host: example.com
                 Range: bytes=0-999
   

2. Server Response:

   
               HTTP/1.1 206 Partial Content
               Content-Type: application/zip
               Content-Range: bytes 0-999/10000
               Content-Length: 1000
               
               [First 1000 bytes of the file]
   

Here, the server indicates that it is returning bytes 0 to 999 out of a total of 10000 bytes.

#Multiple Ranges

Clients can request multiple ranges in a single request. For example:


Range: bytes=0-499, 1000-1499


If the server supports this, it responds with a `multipart/byteranges` content type, where each part is separated by a boundary.

#Example with Multiple Ranges

1. Client Request:

   
               GET /largefile.zip HTTP/1.1
               Host: example.com
               Range: bytes=0-499,1000-1499
   

2. Server Response:

   
             HTTP/1.1 206 Partial Content
             Content-Type: multipart/byteranges; boundary=BOUNDARY
             Content-Length: [total length]
             
             --BOUNDARY
             Content-Type: application/zip
             Content-Range: bytes 0-499/10000
          
             [First 500 bytes of the file]
             --BOUNDARY
             Content-Type: application/zip
             Content-Range: bytes 1000-1499/10000
          
             [Next 500 bytes of the file]
             --BOUNDARY--
   

#Handling Unsatisfiable Range

If the specified range is invalid or not satisfiable (e.g., the range exceeds the file size), the server responds with 
a `416 Requested Range Not Satisfiable` status code and includes a `Content-Range` header indicating the valid range:


                HTTP/1.1 416 Requested Range Not Satisfiable
                Content-Range: bytes */10000


This indicates that the valid byte range for the file is from 0 to 9999.

### Summary

- **Range requests** allow clients to request specific parts of a resource.
- The **`Range` header** in the request specifies the desired byte range(s).
- The **`Content-Range` header** in the response indicates which part of the resource is being returned.
- Servers respond with a **`206 Partial Content`** status if the range is valid and a **`416 Requested Range Not Satisfiable`** status 
if it is not.

This mechanism helps optimize network usage and improve user experience by allowing more efficient data transfers.


-----------------------------------------------------------------------------------------------------
The handling of multiple range requests in HTTP/1.1 is designed to optimize data transfer and ensure compatibility with clients 
    that may have different capabilities for handling responses. 
Here's an explanation with examples to illustrate the rules and behavior described:

#1. Multiple Ranges in a Multipart Response

When a client requests multiple non-overlapping byte ranges in a single HTTP request, 
the server responds with a `multipart/byteranges` response. 
  This format ensures that each requested range is returned as a separate part within the overall response, 
    with appropriate headers indicating the content type and range of each part.

Client Request:

        
        GET /largefile.zip HTTP/1.1
        Host: example.com
        Range: bytes=0-499,1000-1499


Server Response:


                HTTP/1.1 206 Partial Content
                Content-Type: multipart/byteranges; boundary=BOUNDARY
                
                --BOUNDARY
                Content-Type: application/zip
                Content-Range: bytes 0-499/10000
                
                [first 500 bytes of the file]
                --BOUNDARY
                Content-Type: application/zip
                Content-Range: bytes 1000-1499/10000
                
                [next 500 bytes of the file]
                --BOUNDARY--


Here, the server includes each requested byte range as a separate part in the `multipart/byteranges` response, 
  with `--BOUNDARY` marking the start of each part.

#2. Single Range in a Multipart Response (Special Case)

If the client requests multiple ranges, but the result is effectively a single continuous range, 
the server **MAY** still use the `multipart/byteranges` media type, although it's not common. 
This is more for maintaining protocol flexibility and ensuring forward compatibility.

Client Request:


        GET /largefile.zip HTTP/1.1
        Host: example.com
        Range: bytes=0-999


Server Response (Single Range):


              HTTP/1.1 206 Partial Content
              Content-Type: application/zip
              Content-Range: bytes 0-999/10000
              Content-Length: 1000
              
              [first 1000 bytes of the file]


Client Request (Multiple Ranges resulting in a Single Continuous Range):


              GET /largefile.zip HTTP/1.1
              Host: example.com
              Range: bytes=0-499,500-999


Server Response:


            HTTP/1.1 206 Partial Content
            Content-Type: multipart/byteranges; boundary=BOUNDARY
            
            --BOUNDARY
            Content-Type: application/zip
            Content-Range: bytes 0-499/10000
            
            [first 500 bytes of the file]
            --BOUNDARY
            Content-Type: application/zip
            Content-Range: bytes 500-999/10000
            
            [next 500 bytes of the file]
            --BOUNDARY--


In this case, even though the ranges could be combined into a single continuous range, the server might 
still choose to respond with a `multipart/byteranges` response to maintain consistency.


#3. Compatibility Issue and Client Requirements

A client that cannot handle `multipart/byteranges` responses must not request multiple byte-ranges in a single request. 
This is crucial for compatibility.

Client Request:

If the client does not support `multipart/byteranges`, it should only request single ranges like:

        
        GET /largefile.zip HTTP/1.1
        Host: example.com
        Range: bytes=0-499


And should avoid making a request like:


          GET /largefile.zip HTTP/1.1
          Host: example.com
          Range: bytes=0-499,1000-1499


#4. Order of Ranges in Response

The server should return the ranges in the order they appeared in the client's request.

Client Request:


          GET /largefile.zip HTTP/1.1
          Host: example.com
          Range: bytes=1000-1499,0-499


Server Response:


          HTTP/1.1 206 Partial Content
          Content-Type: multipart/byteranges; boundary=BOUNDARY
          
          --BOUNDARY
          Content-Type: application/zip
          Content-Range: bytes 1000-1499/10000
          
          [bytes 1000-1499 of the file]
          --BOUNDARY
          Content-Type: application/zip
          Content-Range: bytes 0-499/10000
          
          [bytes 0-499 of the file]
          --BOUNDARY--


In this case, even though the ranges are requested out of order, the server returns them in the order specified by the client.

By adhering to these rules, HTTP ensures efficient, flexible, and compatible handling of partial content transfers.
                                                              
                                                              



