                  9.5 POST


Responses to this method are not cacheable, unless the response
   includes appropriate Cache-Control or Expires header fields.

------------------------------------------------------------------

The POST method is used to request that the origin server accept the
   entity enclosed in the request as a new subordinate of the resource
   identified by the Request-URI in the Request-Line. POST is designed
   to allow a uniform method to cover the following functions:

      - Annotation of existing resources;
      
            - Posting a message to a bulletin board, newsgroup, mailing list,
              or similar group of articles;
      
            - Providing a block of data, such as the result of submitting a
              form, to a data-handling process;
      
            - Extending a database through an append operation.

The actual function performed by the POST method is determined by the
   server and is usually dependent on the Request-URI. The posted entity
   is subordinate to that URI in the same way that a file is subordinate
   to a directory containing it, a news article is subordinate to a
   newsgroup to which it is posted, or a record is subordinate to a
   database.

The action performed by the POST method might not result in a
   resource that can be identified by a URI. In this case, either 200
   (OK) or 204 (No Content) is the appropriate response status,
   depending on whether or not the response includes an entity that
   describes the result.

If a resource has been created on the origin server, the response
   SHOULD be 201 (Created) and contain an entity which describes the
   status of the request and refers to the new resource, and a Location
   header (see section 14.30).


Responses to this method are not cacheable, unless the response
   includes appropriate Cache-Control or Expires header fields. However,
   the 303 (See Other) response can be used to direct the user agent to
   retrieve a cacheable resource.

   POST requests MUST obey the message transmission requirements set out
   in section 8.2.

   See section 15.1.3 for security considerations.


-------------------------------------------------------------------------------------
The `POST` method in HTTP, as defined in RFC 2616 and updated in RFC 7231, is used to submit data to be processed to a 
specified resource. The data is included in the body of the request. The `POST` method is one of the core methods in HTTP 
and is used for actions such as submitting forms, uploading files, and interacting with APIs.


#Definition in RFC 2616
RFC 2616, which was published in June 1999, initially defined the `POST` method as part of the HTTP/1.1 specification.

#Key Points from RFC 2616 (Section 9.5)

1. Purpose: The `POST` method is used to request that the origin server accept the entity enclosed in the request as a 
        new subordinate of the resource identified by the Request-URI.
2. Functionality:
    - It can result in the creation of a new resource.
    - It can update an existing resource.
    - It can trigger server-side processes that result in changes to the server's state.


3. Idempotency: Unlike the `GET` method, `POST` is not idempotent. 
        Multiple identical `POST` requests can have different effects.


#Definition in RFC 7231
RFC 7231, published in June 2014, updates and replaces RFC 2616 and provides a more detailed and modern definition of the `POST` method.

#Key Points from RFC 7231 (Section 4.3.3)

1. Purpose: The `POST` method requests that the target resource process the representation enclosed in the request 
      according to the resource's own specific semantics.
2. Common Use Cases:
    - Creating a Resource: Submitting data to a web form, which results in creating a new resource.
    - Uploading a File: Sending a file to be stored on the server.
    - Processing Data: Sending data to be processed, such as submitting data to an API.
3. Response: The server's response to a `POST` request can vary. 
      It could be:
            - A success message (201 Created if a resource was created).
            - The result of the processing (e.g., a rendered HTML page or data).
            - A redirection to another resource (3xx status code).

#Example

Let's look at an example of a `POST` request for submitting a form to create a new user.

#HTML Form:


          <form action="/users" method="POST">
              <input type="text" name="username" placeholder="Username">
              <input type="password" name="password" placeholder="Password">
              <button type="submit">Create User</button>
          </form>


#HTTP Request:


            POST /users HTTP/1.1
            Host: www.example.com
            Content-Type: application/x-www-form-urlencoded
            Content-Length: 29
            
            username=johndoe&password=secret


#HTTP Response:


            HTTP/1.1 201 Created
            Location: /users/12345
            Content-Type: application/json
            Content-Length: 50
            
            {
              "id": 12345,
              "username": "johndoe"
            }


#Detailed Breakdown

1. Request Line: The first line specifies the `POST` method, the target resource (`/users`), and the HTTP version (`HTTP/1.1`).

2. Headers:
   - `Host`: Specifies the domain name of the server.
   - `Content-Type`: Indicates the media type of the request body (in this case, `application/x-www-form-urlencoded`).
   - `Content-Length`: Specifies the length of the request body in bytes.

3. Request Body: Contains the data to be processed by the server (in this example, `username=johndoe&password=secret`).

4. Response Status Line: Indicates the outcome of the request (in this case, `201 Created` means a new resource was successfully created).

5. Response Headers:
   - `Location`: Provides the URI of the newly created resource.
   - `Content-Type`: Indicates the media type of the response body.
   - `Content-Length`: Specifies the length of the response body.

6. Response Body: Contains the representation of the newly created resource, often in JSON format for APIs.

#Use Cases

- Form Submission: Submitting user data, such as login credentials, registration information, or survey responses.
- File Upload: Uploading documents, images, or other files to a server.
- API Interaction: Sending data to a web service or API endpoint for processing or storage.
- Remote Procedure Calls (RPC): Invoking a function on the server side that performs a specific action.

### Conclusion
The `POST` method is a versatile and essential part of HTTP, enabling clients to submit data to servers for processing. 
Defined initially in RFC 2616 and refined in RFC 7231, it supports a wide range of use cases, from form submissions to complex 
API interactions. Unlike `GET`, `POST` can have side effects on the server, making it suitable for actions that change 
server state or involve significant data processing.


------------------------------------------------------------------------------

The `POST` method in HTTP is versatile and can be used for a variety of purposes. 
Here are specific examples illustrating the four scenarios mentioned: annotating existing resources, 
posting messages, submitting forms, and appending data to a database.


#1. Annotation of Existing Resources

#Example:
Imagine a collaborative document editing platform where users can add comments to a document.

#Request:

          POST /documents/123/comments HTTP/1.1
          Host: www.example.com
          Content-Type: application/json
          Content-Length: 85
          
          {
            "user": "alice",
            "comment": "This section needs more details about the methodology."
          }


#Response:

          HTTP/1.1 201 Created
          Location: /documents/123/comments/456
          Content-Type: application/json
          Content-Length: 123
          
          {
            "commentId": 456,
            "user": "alice",
            "comment": "This section needs more details about the methodology.",
            "timestamp": "2024-06-17T12:00:00Z"
          }


In this example, the `POST` request adds a comment to an existing document. 
The server responds with a `201 Created` status and the location of the new comment.


#2. Posting a Message to a Bulletin Board, Newsgroup, or Mailing List

#Example:
Posting a message to an online forum or bulletin board.

#Request:

            POST /forum/threads/789/posts HTTP/1.1
            Host: www.example.com
            Content-Type: application/json
            Content-Length: 77
            
            {
              "username": "bob",
              "message": "Does anyone know the release date for the new version?"
            }


#Response:

          HTTP/1.1 201 Created
          Location: /forum/threads/789/posts/1234
          Content-Type: application/json
          Content-Length: 135
          
          {
            "postId": 1234,
            "username": "bob",
            "message": "Does anyone know the release date for the new version?",
            "timestamp": "2024-06-17T12:05:00Z"
          }


Here, the `POST` request adds a new message to a specific thread on a forum. 
The server responds with a `201 Created` status and the location of the new post.



#3. Providing a Block of Data to a Data-Handling Process

#Example:
Submitting a form with user information to a data-processing endpoint.

#Request:
            
            POST /process-data HTTP/1.1
            Host: www.example.com
            Content-Type: application/x-www-form-urlencoded
            Content-Length: 55
            
            name=John+Doe&email=john.doe%40example.com&age=30&country=USA


#Response:

                HTTP/1.1 200 OK
                Content-Type: application/json
                Content-Length: 74
                
                {
                  "status": "success",
                  "message": "Data processed successfully.",
                  "id": 7890
                }


In this example, the `POST` request submits form data to a server for processing. 
The server processes the data and responds with a success message.



#4. Extending a Database through an Append Operation

#Example:
Appending a new record to a database of user transactions.

#Request:

            POST /transactions HTTP/1.1
            Host: www.example.com
            Content-Type: application/json
            Content-Length: 72
            
            {
              "userId": 123,
              "amount": 250.00,
              "currency": "USD",
              "timestamp": "2024-06-17T12:10:00Z"
            }


#Response:

          HTTP/1.1 201 Created
          Location: /transactions/456
          Content-Type: application/json
          Content-Length: 95
          
          {
            "transactionId": 456,
            "userId": 123,
            "amount": 250.00,
            "currency": "USD",
            "timestamp": "2024-06-17T12:10:00Z"
          }


In this scenario, the `POST` request appends a new transaction record to the database. 
The server responds with a `201 Created` status and the location of the new transaction.

#Summary

- Annotation of Existing Resources: Adding comments to a document.
- Posting a Message: Adding a message to a forum thread.
- Providing Data to a Process: Submitting a form for processing.
- Extending a Database: Appending a new transaction record.

These examples demonstrate the versatility of the `POST` method in different contexts, highlighting its capability to 
handle various types of data and interactions with server-side resources.









