                        9.6 PUT

The PUT method requests that the enclosed entity be stored under the
   supplied Request-URI. If the Request-URI refers to an already
   existing resource, the enclosed entity SHOULD be considered as a
   modified version of the one residing on the origin server. If the
   Request-URI does not point to an existing resource, and that URI is
   capable of being defined as a new resource by the requesting user
   agent, the origin server can create the resource with that URI.

If a
   new resource is created, the origin server MUST inform the user agent
   via the 201 (Created) response. If an existing resource is modified,
   either the 200 (OK) or 204 (No Content) response codes SHOULD be sent
   to indicate successful completion of the request. If the resource
   could not be created or modified with the Request-URI, an appropriate
   error response SHOULD be given that reflects the nature of the
   problem. The recipient of the entity MUST NOT ignore any Content-*
   (e.g. Content-Range) headers that it does not understand or implement
   and MUST return a 501 (Not Implemented) response in such cases.

  If the request passes through a cache and the Request-URI identifies
   one or more currently cached entities, those entries SHOULD be
   treated as stale. Responses to this method are not cacheable.


The fundamental difference between the POST and PUT requests is
   reflected in the different meaning of the Request-URI. The URI in a
   POST request identifies the resource that will handle the enclosed
   entity. That resource might be a data-accepting process, a gateway to
   some other protocol, or a separate entity that accepts annotations.
   In contrast, the URI in a PUT request identifies the entity enclosed
   with the request -- the user agent knows what URI is intended and the
   server MUST NOT attempt to apply the request to some other resource.
   If the server desires that the request be applied to a different URI,
it MUST send a 301 (Moved Permanently) response; the user agent MAY
   then make its own decision regarding whether or not to redirect the
   request.

A single resource MAY be identified by many different URIs. For
   example, an article might have a URI for identifying "the current
   version" which is separate from the URI identifying each particular
   version. In this case, a PUT request on a general URI might result in
   several other URIs being defined by the origin server.

   HTTP/1.1 does not define how a PUT method affects the state of an
   origin server.

   PUT requests MUST obey the message transmission requirements set out
   in section 8.2.

   Unless otherwise specified for a particular entity-header, the
   entity-headers in the PUT request SHOULD be applied to the resource
   created or modified by the PUT.


--------------------------------------------------------------------------------------------------
#PUT Method in HTTP

The `PUT` method in HTTP is used to upload a representation of the specified resource. 
If the resource does not exist, the server can create it with the provided content. 
If it does exist, the server should update the resource with the provided content.

The `PUT` method is defined in **RFC 2616** (Section 9.6) and updated in **RFC 7231** (Section 4.3.4).


#Key Points from RFC 2616 and RFC 7231

#RFC 2616 (June 1999)

- Resource Creation/Update: The `PUT` method requests that the enclosed entity be stored under the supplied Request-URI. 
      If the Request-URI refers to an existing resource, the enclosed entity should be considered a modified version 
      of the one residing on the origin server. If the Request-URI does not point to an existing resource, 
      the origin server can create the resource with that URI.
- Idempotence: `PUT` is an idempotent method. Sending the same `PUT` request multiple times will have the same 
          effect as sending it once. This is different from the `POST` method, which is not idempotent.
- Response Codes:
  - `201 Created`: If the resource is created.
  - `200 OK` or `204 No Content`: If the resource is updated successfully.

#RFC 7231 (June 2014)

- *esource Creation/Update: Similar to RFC 2616, RFC 7231 specifies that `PUT` requests should create or replace the 
        resource at the target URI with the state defined by the representation enclosed in the request.
- Idempotence* The method remains idempotent as described in RFC 2616.
- Preconditions and Concurrency Control: The `PUT` method should support mechanisms for 
        preconditions (e.g., using `If-Match` headers) to handle concurrent updates to resources.


#Specific Example

#Example Scenario: Updating a User Profile
Consider a RESTful API where you need to update a user profile. 
The user profile includes information like name, email, and address.


#Request:


          PUT /users/123 HTTP/1.1
          Host: www.example.com
          Content-Type: application/json
          Content-Length: 85
          
          {
            "name": "Jane Doe",
            "email": "jane.doe@example.com",
            "address": "123 Main St, Anytown, USA"
          }


#Possible Responses:

1. Resource Created:

   If the user profile does not exist and the server creates it:

   
             HTTP/1.1 201 Created
             Location: /users/123
             Content-Type: application/json
             Content-Length: 89
          
             {
               "userId": 123,
               "name": "Jane Doe",
               "email": "jane.doe@example.com",
               "address": "123 Main St, Anytown, USA",
               "createdAt": "2024-06-17T12:00:00Z"
             }
  

2. Resource Updated:

   If the user profile exists and is updated:


           HTTP/1.1 200 OK
           Content-Type: application/json
           Content-Length: 89
        
           {
             "userId": 123,
             "name": "Jane Doe",
             "email": "jane.doe@example.com",
             "address": "123 Main St, Anytown, USA",
             "updatedAt": "2024-06-17T12:00:00Z"
           }
   

3. No Content:

   If the user profile is updated and no response body is necessary:


           HTTP/1.1 204 No Content


### Detailed Breakdown of the Example

1. Request Line:
   - `PUT /users/123 HTTP/1.1`: Specifies the `PUT` method, the target resource `/users/123`, and the HTTP version `1.1`.

2. Headers:
   - `Host: www.example.com`: Specifies the domain of the server.
   - `Content-Type: application/json`: Indicates that the request body is in JSON format.
   - `Content-Length: 85`: Specifies the length of the request body in bytes.

3. Request Body:
   - Contains the JSON representation of the user profile to be created or updated.

4. Response:
   - If the resource is created, a `201 Created` status is returned along with the location of the new resource.
   - If the resource is updated, a `200 OK` or `204 No Content` status is returned, depending on whether a response body is necessary.


#Idempotence of PUT

The `PUT` method is idempotent, which means that repeating the same `PUT` request will have the same effect as 
making the request once. For example, if you `PUT` the user profile to `/users/123` multiple times with the same data, 
the user profile will remain consistent and not create duplicates or additional changes beyond the initial update.

### Conclusion
The `PUT` method is a crucial part of HTTP for creating or updating resources in a predictable and idempotent manner. 
Defined initially in RFC 2616 and later refined in RFC 7231, it ensures that clients can safely send the same request 
multiple times without causing unintended side effects, making it ideal for updating resources or 
handling idempotent operations in web applications.


-----------------------------------------------------------------------------------------------
Let's delve deeper into the fundamental differences between `POST` and `PUT` requests based on their handling of the Request-URI, with specific examples to illustrate these concepts.


#POST Request
The `POST` method is used to submit data to a specified resource, often causing a change in state or side effects on the server. 
The URI in a `POST` request typically identifies the resource that will handle the enclosed entity. 
This entity could be processed by the server in various ways, such as creating a new resource, updating an 
existing one, or triggering some server-side action.

#Example: Creating a New Resource

Consider a scenario where you want to create a new user by submitting a `POST` request to a `/users` endpoint.

#Request:

          POST /users HTTP/1.1
          Host: www.example.com
          Content-Type: application/json
          Content-Length: 53
          
          {
            "username": "johndoe",
            "email": "johndoe@example.com"
          }


In this example:
- The URI `/users` indicates that the request is intended to create a new user.
- The server handles the request to create a new user resource based on the data provided in the request body.



#PUT Request

The `PUT` method, on the other hand, is used to upload a representation of a resource or update an existing resource at a specified URI. The URI in a `PUT` request identifies the entity enclosed with the request. 
The server should not attempt to apply the request to a different resource than what is specified by the URI. 
If the server desires the request to be applied to a different URI, it should respond with a `301 Moved Permanently` status code, allowing the user agent to decide whether to redirect.


#Example: Updating an Existing Resource

Let's say you want to update the user profile for `johndoe` at `/users/johndoe`.

#Request:


        PUT /users/johndoe HTTP/1.1
        Host: www.example.com
        Content-Type: application/json
        Content-Length: 58
        
        {
          "username": "johndoe",
          "email": "updatedjohndoe@example.com"
        }


In this example:
- The URI `/users/johndoe` specifies the exact resource (user profile) that should be updated with the data provided in the request body.
- The server should update the user profile for `johndoe` as per the data sent in the `PUT` request. It should not attempt to apply the update to a different user or resource.



#Key Differences Summarized

1. POST:
   - The URI identifies the resource that will handle the enclosed entity.
   - Typically used for creating new resources or triggering server-side processes.
   - The server decides how to interpret the enclosed entity based on the URI and the request context.

2. PUT:
   - The URI identifies the specific entity (resource) that is enclosed with the request.
   - Used for uploading or updating a resource at the specified URI.
   - The server must update the resource identified by the URI with the enclosed entity and should not apply the request to a different resource.



#Conclusion

The distinction between `POST` and `PUT` requests lies primarily in how they handle the Request-URI and the intended operation
on the server. `POST` requests are more flexible and can be applied to a variety of resources or processes identified by the URI.
`PUT` requests are more specific, targeting a particular resource identified by the URI for creation or update, 
without the server redirecting the request to a different URI unless explicitly indicated.
Understanding these differences is crucial for designing RESTful APIs and ensuring proper handling of 
resource creation and updates in web applications.





  





