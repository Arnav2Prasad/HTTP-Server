                    9.1.1 Safe Methods

Implementors should be aware that the software represents the user in
   their interactions over the Internet, and should be careful to allow
   the user to be aware of any actions they might take which may have an
   unexpected significance to themselves or others.

In particular, the convention has been established that the GET and
   HEAD methods SHOULD NOT have the significance of taking an action
   other than retrieval. These methods ought to be considered "safe".
   This allows user agents to represent other methods, such as POST, PUT
   and DELETE, in a special way, so that the user is made aware of the
   fact that a possibly unsafe action is being requested.


Naturally, it is not possible to ensure that the server does not
   generate side-effects as a result of performing a GET request; in
   fact, some dynamic resources consider that a feature. The important
   distinction here is that the user did not request the side-effects,
   so therefore cannot be held accountable for them.


-------------------------------------------------------------------------------
Safe methods in HTTP refer to methods that are designed to be read-only and not intended to change the state of the server. 
These methods are defined in the HTTP/1.1 specification, documented in RFC 9110.

#RFC Reference
- RFC Number: RFC 9110
- Title: HTTP Semantics

#Safe Methods Description
Safe methods are HTTP request methods that are intended to be idempotent and do not have the side effect of modifying resources on 
the server. This means that these methods should not cause any state changes on the server. 
According to the specification, the methods considered safe are `GET`, `HEAD`, and `OPTIONS`.

#Key Points from the RFC:
1. Safe Methods: The `GET`, `HEAD`, and `OPTIONS` methods are considered safe because they are intended for retrieving 
        information rather than modifying it.
2. Idempotence: Safe methods are idempotent, meaning that making multiple identical requests should yield the same 
        result and not cause any side effects.
3. Read-Only Operations: These methods are designed to perform read-only operations on the server.


#Examples and Usage

#1. `GET`
The `GET` method requests a representation of the specified resource. 
Requests using `GET` should only retrieve data and should not have any other effect.

#Example:
Request:
          
          GET /index.html HTTP/1.1
          Host: example.com

Response:

          HTTP/1.1 200 OK
          Content-Type: text/html
          
          <html>
          <body>
          <h1>Welcome to the homepage</h1>
          </body>
          </html>


#2. `HEAD`
The `HEAD` method is identical to `GET` except that the server must not return a message body in the response. 
It is used to obtain the headers sent by a server without the response body, 
typically to check what a `GET` request will return before actually making one.


#Example:
Request:

              HEAD /index.html HTTP/1.1
              Host: example.com

Response:

              HTTP/1.1 200 OK
              Content-Type: text/html
              Content-Length: 137



#3. `OPTIONS`
The `OPTIONS` method requests information about the communication options available for the target resource or server. 
It is used to determine the capabilities of a web server and can be used to test server functionality.

#Example:
Request:
            
            OPTIONS /index.html HTTP/1.1
            Host: example.com

Response:
              
              HTTP/1.1 204 No Content
              Allow: GET, HEAD, POST, OPTIONS


#Summary
Safe methods in HTTP, as defined in RFC 9110, include `GET`, `HEAD`, and `OPTIONS`. These methods are intended to be idempotent and 
read-only, meaning they should not cause any changes to the server's state. 
They are used primarily for retrieving information or for diagnostic purposes without modifying resources on the server.



