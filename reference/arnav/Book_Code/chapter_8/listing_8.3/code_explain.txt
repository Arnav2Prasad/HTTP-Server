
#!/usr/bin/env python3
# Foundations of Python Network Programming - Chapter 8 - queuecrazy.py
# Small application that uses several different message queues

  
- `#!/usr/bin/env python3`: This is called a shebang line, and it's used to tell the system what interpreter to use for executing 
        the script. In this case, it specifies that the script should be run using the Python 3 interpreter.



import random, threading, time, zmq

zcontext = zmq.Context()


- `import random, threading, time, zmq`: This line imports the necessary modules for the script.   
          `random` is used for generating random words, 
          `threading` for creating threads,
          `time` for time-related functions,
        `zmq` is the Python binding for ZeroMQ, a messaging library.

-  `zcontext = zmq.Context()`: This line creates a ZeroMQ context object. Contexts are used to manage 
      sockets and other resources in ZeroMQ. 


  
def fountain(url):
    """Produces a steady stream of words."""
    zsock = zcontext.socket(zmq.PUSH)
    zsock.bind(url)
    words = [w for w in dir(__builtins__) if w.islower()]
    while True:
        zsock.send_string(random.choice(words))
        time.sleep(0.4)


- `def fountain(url):`: This line defines a function named `fountain` that takes a `url` parameter.

- `zsock = zcontext.socket(zmq.PUSH)`: This line creates a ZeroMQ PUSH socket using the context object `zcontext`. 
        PUSH sockets are used to push messages to a queue.
- `zsock.bind(url)`: This line binds the socket to the specified `url`.
- `words = [w for w in dir(__builtins__) if w.islower()]`: This line generates a list of lowercase built-in Python functions.

- `zsock.send_string(random.choice(words))`: This line sends a random word from the `words` list over the ZeroMQ socket. 
      `send_string` is used to send a string message.
- `time.sleep(0.4)`: This line pauses the execution of the loop for 0.4 seconds.


def responder(url, function):
    """Performs a string operation on each word received."""
    zsock = zcontext.socket(zmq.REP)
    zsock.bind(url)
    while True:
        word = zsock.recv_string()
        zsock.send_string(function(word))  # send the modified word back


- `def responder(url, function):`: This line defines a function named `responder` that takes two parameters: `url` and `function`.

- `zsock = zcontext.socket(zmq.REP)`: This line creates a ZeroMQ REP (Reply) socket.
- `zsock.bind(url)`: This line binds the socket to the specified `url`.

- `word = zsock.recv_string()`: This line receives a string message from the socket.
- `zsock.send_string(function(word))`: This line sends the modified word (after applying the specified function) back over the socket.


start_thread(fountain, 'tcp://127.0.0.1:6700')
start_thread(responder, 'tcp://127.0.0.1:6701', str.upper)
start_thread(responder, 'tcp://127.0.0.1:6702', str.lower)
for n in range(3):
    start_thread(processor, n + 1, 'tcp://127.0.0.1:6700', ['tcp://127.0.0.1:6701', 'tcp://127.0.0.1:6702'])
time.sleep(30)


1. `start_thread(fountain, 'tcp://127.0.0.1:6700')`: This line starts a thread using the `start_thread` function, 
      passing it the `fountain` function and the URL `'tcp://127.0.0.1:6700'`. The `fountain` function is responsible 
      for producing a steady stream of words and binds to the provided URL.

2. `start_thread(responder, 'tcp://127.0.0.1:6701', str.upper)`: This line starts another thread using the `start_thread` 
      function, passing it the `responder` function and the URL `'tcp://127.0.0.1:6701'`. The `responder` function is 
      responsible for performing a string operation on each word received, in this case, converting the word to uppercase.

3. `start_thread(responder, 'tcp://127.0.0.1:6702', str.lower)`: Similar to the previous line, this starts a thread 
      with the `responder` function, but this time it binds to the URL `'tcp://127.0.0.1:6702'` and converts the received words to lowercase.

4. `for n in range(3):`: This line starts a loop that iterates three times.

5. `start_thread(processor, n + 1, 'tcp://127.0.0.1:6700', ['tcp://127.0.0.1:6701', 'tcp://127.0.0.1:6702'])`: Inside the loop, the `start_thread` function is called again, this time passing the `processor` function, the value `n + 1`, and a list of URLs `['tcp://127.0.0.1:6701', 'tcp://127.0.0.1:6702']`. The `processor` function reads words as they are produced, gets them processed by the responders, and prints them.

6. `time.sleep(30)`: After starting the threads, the main program sleeps for 30 seconds to allow time for processing.

This code snippet sets up a small distributed system using ZeroMQ. It starts multiple threads, each responsible for a specific task such as producing words (`fountain`), processing words (`processor`), and modifying words (`responder`). These threads communicate with each other using ZeroMQ sockets over TCP/IP. The `start_thread` function is a utility function that creates and starts a new thread for a given function with its arguments.

  
